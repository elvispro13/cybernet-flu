// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Saldo.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Saldo TABLE
class TableSaldo extends SqfEntityTableBase {
  TableSaldo() {
    // declare properties of EntityTable
    tableName = 'Saldo';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('idR', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('idCliente', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('idContrato', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('idServicio', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('idSaldoPadre', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('Cliente', DbType.text, isNotNull: true),
      SqfEntityFieldBase('Monto', DbType.numeric, isNotNull: true),
      SqfEntityFieldBase('Pagado', DbType.numeric, isNotNull: true),
      SqfEntityFieldBase('Descuento', DbType.numeric, isNotNull: true),
      SqfEntityFieldBase('Descripcion', DbType.text),
      SqfEntityFieldBase('FechaPago', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('Tipo', DbType.text, isNotNull: true),
      SqfEntityFieldBase('Facturado', DbType.text, isNotNull: true),
      SqfEntityFieldBase('Estado', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSaldo();
  }
}

// Cliente TABLE
class TableCliente extends SqfEntityTableBase {
  TableCliente() {
    // declare properties of EntityTable
    tableName = 'Cliente';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('idR', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('Nombre', DbType.text, isNotNull: true),
      SqfEntityFieldBase('RTN', DbType.text, isNotNull: true),
      SqfEntityFieldBase('Estado', DbType.text, isNotNull: true),
      SqfEntityFieldBase('CreadoPor', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('ModificadoPor', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('FechaCreacion', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('FechaModificacion', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCliente();
  }
}

// Usuario TABLE
class TableUsuario extends SqfEntityTableBase {
  TableUsuario() {
    // declare properties of EntityTable
    tableName = 'Usuario';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('User', DbType.text, isNotNull: true),
      SqfEntityFieldBase('Password', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUsuario();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class BDCybernet extends SqfEntityModelProvider {
  BDCybernet() {
    databaseName = myDBModel.databaseName;
    password = myDBModel.password;
    dbVersion = myDBModel.dbVersion;
    preSaveAction = myDBModel.preSaveAction;
    logFunction = myDBModel.logFunction;
    databaseTables = [
      TableSaldo.getInstance,
      TableCliente.getInstance,
      TableUsuario.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDBModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDBModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Saldo
class Saldo extends TableBase {
  Saldo(
      {this.id,
      this.idR,
      this.idCliente,
      this.idContrato,
      this.idServicio,
      this.idSaldoPadre,
      this.Cliente,
      this.Monto,
      this.Pagado,
      this.Descuento,
      this.Descripcion,
      this.FechaPago,
      this.Tipo,
      this.Facturado,
      this.Estado}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Saldo.withFields(
      this.idR,
      this.idCliente,
      this.idContrato,
      this.idServicio,
      this.idSaldoPadre,
      this.Cliente,
      this.Monto,
      this.Pagado,
      this.Descuento,
      this.Descripcion,
      this.FechaPago,
      this.Tipo,
      this.Facturado,
      this.Estado) {
    _setDefaultValues();
  }
  Saldo.withId(
      this.id,
      this.idR,
      this.idCliente,
      this.idContrato,
      this.idServicio,
      this.idSaldoPadre,
      this.Cliente,
      this.Monto,
      this.Pagado,
      this.Descuento,
      this.Descripcion,
      this.FechaPago,
      this.Tipo,
      this.Facturado,
      this.Estado) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Saldo.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['idR'] != null) {
      idR = int.tryParse(o['idR'].toString());
    }
    if (o['idCliente'] != null) {
      idCliente = int.tryParse(o['idCliente'].toString());
    }
    if (o['idContrato'] != null) {
      idContrato = int.tryParse(o['idContrato'].toString());
    }
    if (o['idServicio'] != null) {
      idServicio = int.tryParse(o['idServicio'].toString());
    }
    if (o['idSaldoPadre'] != null) {
      idSaldoPadre = int.tryParse(o['idSaldoPadre'].toString());
    }
    if (o['Cliente'] != null) {
      Cliente = o['Cliente'].toString();
    }
    if (o['Monto'] != null) {
      Monto = int.tryParse(o['Monto'].toString());
    }
    if (o['Pagado'] != null) {
      Pagado = int.tryParse(o['Pagado'].toString());
    }
    if (o['Descuento'] != null) {
      Descuento = int.tryParse(o['Descuento'].toString());
    }
    if (o['Descripcion'] != null) {
      Descripcion = o['Descripcion'].toString();
    }
    if (o['FechaPago'] != null) {
      FechaPago = int.tryParse(o['FechaPago'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['FechaPago'].toString())!)
          : DateTime.tryParse(o['FechaPago'].toString());
    }
    if (o['Tipo'] != null) {
      Tipo = o['Tipo'].toString();
    }
    if (o['Facturado'] != null) {
      Facturado = o['Facturado'].toString();
    }
    if (o['Estado'] != null) {
      Estado = o['Estado'].toString();
    }
  }
  // FIELDS (Saldo)
  int? id;
  int? idR;
  int? idCliente;
  int? idContrato;
  int? idServicio;
  int? idSaldoPadre;
  String? Cliente;
  int? Monto;
  int? Pagado;
  int? Descuento;
  String? Descripcion;
  DateTime? FechaPago;
  String? Tipo;
  String? Facturado;
  String? Estado;

  // end FIELDS (Saldo)

  static const bool _softDeleteActivated = false;
  SaldoManager? __mnSaldo;

  SaldoManager get _mnSaldo {
    return __mnSaldo = __mnSaldo ?? SaldoManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (idR != null || !forView) {
      map['idR'] = idR;
    }
    if (idCliente != null || !forView) {
      map['idCliente'] = idCliente;
    }
    if (idContrato != null || !forView) {
      map['idContrato'] = idContrato;
    }
    if (idServicio != null || !forView) {
      map['idServicio'] = idServicio;
    }
    if (idSaldoPadre != null || !forView) {
      map['idSaldoPadre'] = idSaldoPadre;
    }
    if (Cliente != null || !forView) {
      map['Cliente'] = Cliente;
    }
    if (Monto != null || !forView) {
      map['Monto'] = Monto;
    }
    if (Pagado != null || !forView) {
      map['Pagado'] = Pagado;
    }
    if (Descuento != null || !forView) {
      map['Descuento'] = Descuento;
    }
    if (Descripcion != null || !forView) {
      map['Descripcion'] = Descripcion;
    }
    if (FechaPago != null) {
      map['FechaPago'] = forJson
          ? FechaPago!.toString()
          : forQuery
              ? FechaPago!.millisecondsSinceEpoch
              : FechaPago;
    } else if (FechaPago != null || !forView) {
      map['FechaPago'] = null;
    }
    if (Tipo != null || !forView) {
      map['Tipo'] = Tipo;
    }
    if (Facturado != null || !forView) {
      map['Facturado'] = Facturado;
    }
    if (Estado != null || !forView) {
      map['Estado'] = Estado;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (idR != null || !forView) {
      map['idR'] = idR;
    }
    if (idCliente != null || !forView) {
      map['idCliente'] = idCliente;
    }
    if (idContrato != null || !forView) {
      map['idContrato'] = idContrato;
    }
    if (idServicio != null || !forView) {
      map['idServicio'] = idServicio;
    }
    if (idSaldoPadre != null || !forView) {
      map['idSaldoPadre'] = idSaldoPadre;
    }
    if (Cliente != null || !forView) {
      map['Cliente'] = Cliente;
    }
    if (Monto != null || !forView) {
      map['Monto'] = Monto;
    }
    if (Pagado != null || !forView) {
      map['Pagado'] = Pagado;
    }
    if (Descuento != null || !forView) {
      map['Descuento'] = Descuento;
    }
    if (Descripcion != null || !forView) {
      map['Descripcion'] = Descripcion;
    }
    if (FechaPago != null) {
      map['FechaPago'] = forJson
          ? FechaPago!.toString()
          : forQuery
              ? FechaPago!.millisecondsSinceEpoch
              : FechaPago;
    } else if (FechaPago != null || !forView) {
      map['FechaPago'] = null;
    }
    if (Tipo != null || !forView) {
      map['Tipo'] = Tipo;
    }
    if (Facturado != null || !forView) {
      map['Facturado'] = Facturado;
    }
    if (Estado != null || !forView) {
      map['Estado'] = Estado;
    }

    return map;
  }

  /// This method returns Json String [Saldo]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Saldo]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      idR,
      idCliente,
      idContrato,
      idServicio,
      idSaldoPadre,
      Cliente,
      Monto,
      Pagado,
      Descuento,
      Descripcion,
      FechaPago != null ? FechaPago!.millisecondsSinceEpoch : null,
      Tipo,
      Facturado,
      Estado
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      idR,
      idCliente,
      idContrato,
      idServicio,
      idSaldoPadre,
      Cliente,
      Monto,
      Pagado,
      Descuento,
      Descripcion,
      FechaPago != null ? FechaPago!.millisecondsSinceEpoch : null,
      Tipo,
      Facturado,
      Estado
    ];
  }

  static Future<List<Saldo>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Saldo.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Saldo>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Saldo>[];
    try {
      objList = list
          .map((saldo) => Saldo.fromMap(saldo as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Saldo.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Saldo>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Saldo> objList = <Saldo>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Saldo.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Saldo by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Saldo] if exist, otherwise returns null
  Future<Saldo?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Saldo? obj;
    final data = await _mnSaldo.getById([id]);
    if (data.length != 0) {
      obj = Saldo.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Saldo) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSaldo.insert(this, ignoreBatch);
    } else {
      await _mnSaldo.update(this);
    }

    return id;
  }

  /// Saves the (Saldo) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSaldo.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSaldo.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Saldo. Returns a new Primary Key value of Saldo

  /// <returns>Returns a new Primary Key value of Saldo
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Saldo> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Saldo> saldos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await BDCybernet().batchStart();
    for (final obj in saldos) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await BDCybernet().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < saldos.length; i++) {
        if (saldos[i].id == null) {
          saldos[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSaldo.rawInsert(
          'INSERT OR REPLACE INTO Saldo (id, idR, idCliente, idContrato, idServicio, idSaldoPadre, Cliente, Monto, Pagado, Descuento, Descripcion, FechaPago, Tipo, Facturado, Estado)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            idR,
            idCliente,
            idContrato,
            idServicio,
            idSaldoPadre,
            Cliente,
            Monto,
            Pagado,
            Descuento,
            Descripcion,
            FechaPago != null ? FechaPago!.millisecondsSinceEpoch : null,
            Tipo,
            Facturado,
            Estado
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Saldo id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Saldo id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Saldo Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Saldo>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Saldo> saldos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnSaldo.rawInsertAll(
        'INSERT OR REPLACE INTO Saldo (id, idR, idCliente, idContrato, idServicio, idSaldoPadre, Cliente, Monto, Pagado, Descuento, Descripcion, FechaPago, Tipo, Facturado, Estado)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        saldos,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Saldo

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Saldo invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSaldo
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSaldo.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Saldo] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SaldoFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SaldoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SaldoFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SaldoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion saldo

// region SaldoField
class SaldoField extends FilterBase {
  SaldoField(SaldoFilterBuilder saldoFB) : super(saldoFB);

  @override
  SaldoFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder isNull() {
    return super.isNull() as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SaldoFilterBuilder;
  }

  @override
  SaldoField get not {
    return super.not as SaldoField;
  }
}
// endregion SaldoField

// region SaldoFilterBuilder
class SaldoFilterBuilder extends ConjunctionBase {
  SaldoFilterBuilder(Saldo obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnSaldo = obj._mnSaldo;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SaldoManager? _mnSaldo;

  /// put the sql keyword 'AND'
  @override
  SaldoFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SaldoFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SaldoFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SaldoFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SaldoFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SaldoFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SaldoFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SaldoFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SaldoFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SaldoFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SaldoFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SaldoField _setField(SaldoField? field, String colName, DbType dbtype) {
    return SaldoField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SaldoField? _id;
  SaldoField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SaldoField? _idR;
  SaldoField get idR {
    return _idR = _setField(_idR, 'idR', DbType.integer);
  }

  SaldoField? _idCliente;
  SaldoField get idCliente {
    return _idCliente = _setField(_idCliente, 'idCliente', DbType.integer);
  }

  SaldoField? _idContrato;
  SaldoField get idContrato {
    return _idContrato = _setField(_idContrato, 'idContrato', DbType.integer);
  }

  SaldoField? _idServicio;
  SaldoField get idServicio {
    return _idServicio = _setField(_idServicio, 'idServicio', DbType.integer);
  }

  SaldoField? _idSaldoPadre;
  SaldoField get idSaldoPadre {
    return _idSaldoPadre =
        _setField(_idSaldoPadre, 'idSaldoPadre', DbType.integer);
  }

  SaldoField? _Cliente;
  SaldoField get Cliente {
    return _Cliente = _setField(_Cliente, 'Cliente', DbType.text);
  }

  SaldoField? _Monto;
  SaldoField get Monto {
    return _Monto = _setField(_Monto, 'Monto', DbType.numeric);
  }

  SaldoField? _Pagado;
  SaldoField get Pagado {
    return _Pagado = _setField(_Pagado, 'Pagado', DbType.numeric);
  }

  SaldoField? _Descuento;
  SaldoField get Descuento {
    return _Descuento = _setField(_Descuento, 'Descuento', DbType.numeric);
  }

  SaldoField? _Descripcion;
  SaldoField get Descripcion {
    return _Descripcion = _setField(_Descripcion, 'Descripcion', DbType.text);
  }

  SaldoField? _FechaPago;
  SaldoField get FechaPago {
    return _FechaPago = _setField(_FechaPago, 'FechaPago', DbType.datetime);
  }

  SaldoField? _Tipo;
  SaldoField get Tipo {
    return _Tipo = _setField(_Tipo, 'Tipo', DbType.text);
  }

  SaldoField? _Facturado;
  SaldoField get Facturado {
    return _Facturado = _setField(_Facturado, 'Facturado', DbType.text);
  }

  SaldoField? _Estado;
  SaldoField get Estado {
    return _Estado = _setField(_Estado, 'Estado', DbType.text);
  }

  /// Deletes List<Saldo> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSaldo!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSaldo!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Saldo ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSaldo!.updateBatch(qparams, values);
  }

  /// This method always returns [Saldo] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Saldo?
  @override
  Future<Saldo?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSaldo!.toList(qparams);
    final data = await objFuture;
    Saldo? obj;
    if (data.isNotEmpty) {
      obj = Saldo.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Saldo]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Saldo?
  @override
  Future<Saldo> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Saldo();
  }

  /// This method returns int. [Saldo]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? saldoCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final saldosFuture = await _mnSaldo!.toList(qparams);
    final int count = saldosFuture[0]['CNT'] as int;
    if (saldoCount != null) {
      saldoCount(count);
    }
    return count;
  }

  /// This method returns List<Saldo> [Saldo]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Saldo>
  @override
  Future<List<Saldo>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Saldo> saldosData = await Saldo.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return saldosData;
  }

  /// This method returns Json String [Saldo]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Saldo]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Saldo]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSaldo!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Saldo]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Saldo WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSaldo!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Saldo]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSaldo!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Saldo.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSaldo!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SaldoFilterBuilder

// region SaldoFields
class SaldoFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIdR;
  static TableField get idR {
    return _fIdR = _fIdR ?? SqlSyntax.setField(_fIdR, 'idR', DbType.integer);
  }

  static TableField? _fIdCliente;
  static TableField get idCliente {
    return _fIdCliente = _fIdCliente ??
        SqlSyntax.setField(_fIdCliente, 'idCliente', DbType.integer);
  }

  static TableField? _fIdContrato;
  static TableField get idContrato {
    return _fIdContrato = _fIdContrato ??
        SqlSyntax.setField(_fIdContrato, 'idContrato', DbType.integer);
  }

  static TableField? _fIdServicio;
  static TableField get idServicio {
    return _fIdServicio = _fIdServicio ??
        SqlSyntax.setField(_fIdServicio, 'idServicio', DbType.integer);
  }

  static TableField? _fIdSaldoPadre;
  static TableField get idSaldoPadre {
    return _fIdSaldoPadre = _fIdSaldoPadre ??
        SqlSyntax.setField(_fIdSaldoPadre, 'idSaldoPadre', DbType.integer);
  }

  static TableField? _fCliente;
  static TableField get Cliente {
    return _fCliente =
        _fCliente ?? SqlSyntax.setField(_fCliente, 'Cliente', DbType.text);
  }

  static TableField? _fMonto;
  static TableField get Monto {
    return _fMonto =
        _fMonto ?? SqlSyntax.setField(_fMonto, 'Monto', DbType.numeric);
  }

  static TableField? _fPagado;
  static TableField get Pagado {
    return _fPagado =
        _fPagado ?? SqlSyntax.setField(_fPagado, 'Pagado', DbType.numeric);
  }

  static TableField? _fDescuento;
  static TableField get Descuento {
    return _fDescuento = _fDescuento ??
        SqlSyntax.setField(_fDescuento, 'Descuento', DbType.numeric);
  }

  static TableField? _fDescripcion;
  static TableField get Descripcion {
    return _fDescripcion = _fDescripcion ??
        SqlSyntax.setField(_fDescripcion, 'Descripcion', DbType.text);
  }

  static TableField? _fFechaPago;
  static TableField get FechaPago {
    return _fFechaPago = _fFechaPago ??
        SqlSyntax.setField(_fFechaPago, 'FechaPago', DbType.datetime);
  }

  static TableField? _fTipo;
  static TableField get Tipo {
    return _fTipo = _fTipo ?? SqlSyntax.setField(_fTipo, 'Tipo', DbType.text);
  }

  static TableField? _fFacturado;
  static TableField get Facturado {
    return _fFacturado = _fFacturado ??
        SqlSyntax.setField(_fFacturado, 'Facturado', DbType.text);
  }

  static TableField? _fEstado;
  static TableField get Estado {
    return _fEstado =
        _fEstado ?? SqlSyntax.setField(_fEstado, 'Estado', DbType.text);
  }
}
// endregion SaldoFields

//region SaldoManager
class SaldoManager extends SqfEntityProvider {
  SaldoManager()
      : super(BDCybernet(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Saldo';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SaldoManager
// region Cliente
class Cliente extends TableBase {
  Cliente(
      {this.id,
      this.idR,
      this.Nombre,
      this.RTN,
      this.Estado,
      this.CreadoPor,
      this.ModificadoPor,
      this.FechaCreacion,
      this.FechaModificacion}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Cliente.withFields(
      this.idR,
      this.Nombre,
      this.RTN,
      this.Estado,
      this.CreadoPor,
      this.ModificadoPor,
      this.FechaCreacion,
      this.FechaModificacion) {
    _setDefaultValues();
  }
  Cliente.withId(
      this.id,
      this.idR,
      this.Nombre,
      this.RTN,
      this.Estado,
      this.CreadoPor,
      this.ModificadoPor,
      this.FechaCreacion,
      this.FechaModificacion) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Cliente.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['idR'] != null) {
      idR = int.tryParse(o['idR'].toString());
    }
    if (o['Nombre'] != null) {
      Nombre = o['Nombre'].toString();
    }
    if (o['RTN'] != null) {
      RTN = o['RTN'].toString();
    }
    if (o['Estado'] != null) {
      Estado = o['Estado'].toString();
    }
    if (o['CreadoPor'] != null) {
      CreadoPor = int.tryParse(o['CreadoPor'].toString());
    }
    if (o['ModificadoPor'] != null) {
      ModificadoPor = int.tryParse(o['ModificadoPor'].toString());
    }
    if (o['FechaCreacion'] != null) {
      FechaCreacion = int.tryParse(o['FechaCreacion'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['FechaCreacion'].toString())!)
          : DateTime.tryParse(o['FechaCreacion'].toString());
    }
    if (o['FechaModificacion'] != null) {
      FechaModificacion =
          int.tryParse(o['FechaModificacion'].toString()) != null
              ? DateTime.fromMillisecondsSinceEpoch(
                  int.tryParse(o['FechaModificacion'].toString())!)
              : DateTime.tryParse(o['FechaModificacion'].toString());
    }
  }
  // FIELDS (Cliente)
  int? id;
  int? idR;
  String? Nombre;
  String? RTN;
  String? Estado;
  int? CreadoPor;
  int? ModificadoPor;
  DateTime? FechaCreacion;
  DateTime? FechaModificacion;

  // end FIELDS (Cliente)

  static const bool _softDeleteActivated = false;
  ClienteManager? __mnCliente;

  ClienteManager get _mnCliente {
    return __mnCliente = __mnCliente ?? ClienteManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (idR != null || !forView) {
      map['idR'] = idR;
    }
    if (Nombre != null || !forView) {
      map['Nombre'] = Nombre;
    }
    if (RTN != null || !forView) {
      map['RTN'] = RTN;
    }
    if (Estado != null || !forView) {
      map['Estado'] = Estado;
    }
    if (CreadoPor != null || !forView) {
      map['CreadoPor'] = CreadoPor;
    }
    if (ModificadoPor != null || !forView) {
      map['ModificadoPor'] = ModificadoPor;
    }
    if (FechaCreacion != null) {
      map['FechaCreacion'] = forJson
          ? FechaCreacion!.toString()
          : forQuery
              ? FechaCreacion!.millisecondsSinceEpoch
              : FechaCreacion;
    } else if (FechaCreacion != null || !forView) {
      map['FechaCreacion'] = null;
    }
    if (FechaModificacion != null) {
      map['FechaModificacion'] = forJson
          ? FechaModificacion!.toString()
          : forQuery
              ? FechaModificacion!.millisecondsSinceEpoch
              : FechaModificacion;
    } else if (FechaModificacion != null || !forView) {
      map['FechaModificacion'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (idR != null || !forView) {
      map['idR'] = idR;
    }
    if (Nombre != null || !forView) {
      map['Nombre'] = Nombre;
    }
    if (RTN != null || !forView) {
      map['RTN'] = RTN;
    }
    if (Estado != null || !forView) {
      map['Estado'] = Estado;
    }
    if (CreadoPor != null || !forView) {
      map['CreadoPor'] = CreadoPor;
    }
    if (ModificadoPor != null || !forView) {
      map['ModificadoPor'] = ModificadoPor;
    }
    if (FechaCreacion != null) {
      map['FechaCreacion'] = forJson
          ? FechaCreacion!.toString()
          : forQuery
              ? FechaCreacion!.millisecondsSinceEpoch
              : FechaCreacion;
    } else if (FechaCreacion != null || !forView) {
      map['FechaCreacion'] = null;
    }
    if (FechaModificacion != null) {
      map['FechaModificacion'] = forJson
          ? FechaModificacion!.toString()
          : forQuery
              ? FechaModificacion!.millisecondsSinceEpoch
              : FechaModificacion;
    } else if (FechaModificacion != null || !forView) {
      map['FechaModificacion'] = null;
    }

    return map;
  }

  /// This method returns Json String [Cliente]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Cliente]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      idR,
      Nombre,
      RTN,
      Estado,
      CreadoPor,
      ModificadoPor,
      FechaCreacion != null ? FechaCreacion!.millisecondsSinceEpoch : null,
      FechaModificacion != null
          ? FechaModificacion!.millisecondsSinceEpoch
          : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      idR,
      Nombre,
      RTN,
      Estado,
      CreadoPor,
      ModificadoPor,
      FechaCreacion != null ? FechaCreacion!.millisecondsSinceEpoch : null,
      FechaModificacion != null
          ? FechaModificacion!.millisecondsSinceEpoch
          : null
    ];
  }

  static Future<List<Cliente>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Cliente.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Cliente>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Cliente>[];
    try {
      objList = list
          .map((cliente) => Cliente.fromMap(cliente as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Cliente.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Cliente>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Cliente> objList = <Cliente>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Cliente.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Cliente by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Cliente] if exist, otherwise returns null
  Future<Cliente?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Cliente? obj;
    final data = await _mnCliente.getById([id]);
    if (data.length != 0) {
      obj = Cliente.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Cliente) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCliente.insert(this, ignoreBatch);
    } else {
      await _mnCliente.update(this);
    }

    return id;
  }

  /// Saves the (Cliente) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCliente.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCliente.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Cliente. Returns a new Primary Key value of Cliente

  /// <returns>Returns a new Primary Key value of Cliente
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Cliente> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Cliente> clientes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await BDCybernet().batchStart();
    for (final obj in clientes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await BDCybernet().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < clientes.length; i++) {
        if (clientes[i].id == null) {
          clientes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCliente.rawInsert(
          'INSERT OR REPLACE INTO Cliente (id, idR, Nombre, RTN, Estado, CreadoPor, ModificadoPor, FechaCreacion, FechaModificacion)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            idR,
            Nombre,
            RTN,
            Estado,
            CreadoPor,
            ModificadoPor,
            FechaCreacion != null
                ? FechaCreacion!.millisecondsSinceEpoch
                : null,
            FechaModificacion != null
                ? FechaModificacion!.millisecondsSinceEpoch
                : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Cliente id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Cliente id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Cliente Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Cliente>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Cliente> clientes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnCliente.rawInsertAll(
        'INSERT OR REPLACE INTO Cliente (id, idR, Nombre, RTN, Estado, CreadoPor, ModificadoPor, FechaCreacion, FechaModificacion)  VALUES (?,?,?,?,?,?,?,?,?)',
        clientes,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Cliente

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Cliente invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnCliente
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCliente.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Cliente] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ClienteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ClienteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ClienteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ClienteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion cliente

// region ClienteField
class ClienteField extends FilterBase {
  ClienteField(ClienteFilterBuilder clienteFB) : super(clienteFB);

  @override
  ClienteFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder isNull() {
    return super.isNull() as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ClienteFilterBuilder;
  }

  @override
  ClienteField get not {
    return super.not as ClienteField;
  }
}
// endregion ClienteField

// region ClienteFilterBuilder
class ClienteFilterBuilder extends ConjunctionBase {
  ClienteFilterBuilder(Cliente obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCliente = obj._mnCliente;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ClienteManager? _mnCliente;

  /// put the sql keyword 'AND'
  @override
  ClienteFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ClienteFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ClienteFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ClienteFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ClienteFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ClienteFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ClienteFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ClienteFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ClienteFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ClienteFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ClienteFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ClienteField _setField(ClienteField? field, String colName, DbType dbtype) {
    return ClienteField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ClienteField? _id;
  ClienteField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ClienteField? _idR;
  ClienteField get idR {
    return _idR = _setField(_idR, 'idR', DbType.integer);
  }

  ClienteField? _Nombre;
  ClienteField get Nombre {
    return _Nombre = _setField(_Nombre, 'Nombre', DbType.text);
  }

  ClienteField? _RTN;
  ClienteField get RTN {
    return _RTN = _setField(_RTN, 'RTN', DbType.text);
  }

  ClienteField? _Estado;
  ClienteField get Estado {
    return _Estado = _setField(_Estado, 'Estado', DbType.text);
  }

  ClienteField? _CreadoPor;
  ClienteField get CreadoPor {
    return _CreadoPor = _setField(_CreadoPor, 'CreadoPor', DbType.integer);
  }

  ClienteField? _ModificadoPor;
  ClienteField get ModificadoPor {
    return _ModificadoPor =
        _setField(_ModificadoPor, 'ModificadoPor', DbType.integer);
  }

  ClienteField? _FechaCreacion;
  ClienteField get FechaCreacion {
    return _FechaCreacion =
        _setField(_FechaCreacion, 'FechaCreacion', DbType.datetime);
  }

  ClienteField? _FechaModificacion;
  ClienteField get FechaModificacion {
    return _FechaModificacion =
        _setField(_FechaModificacion, 'FechaModificacion', DbType.datetime);
  }

  /// Deletes List<Cliente> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCliente!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCliente!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Cliente ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCliente!.updateBatch(qparams, values);
  }

  /// This method always returns [Cliente] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Cliente?
  @override
  Future<Cliente?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCliente!.toList(qparams);
    final data = await objFuture;
    Cliente? obj;
    if (data.isNotEmpty) {
      obj = Cliente.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Cliente]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Cliente?
  @override
  Future<Cliente> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Cliente();
  }

  /// This method returns int. [Cliente]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? clienteCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final clientesFuture = await _mnCliente!.toList(qparams);
    final int count = clientesFuture[0]['CNT'] as int;
    if (clienteCount != null) {
      clienteCount(count);
    }
    return count;
  }

  /// This method returns List<Cliente> [Cliente]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Cliente>
  @override
  Future<List<Cliente>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Cliente> clientesData = await Cliente.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return clientesData;
  }

  /// This method returns Json String [Cliente]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Cliente]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Cliente]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCliente!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Cliente]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Cliente WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCliente!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Cliente]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCliente!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Cliente.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCliente!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ClienteFilterBuilder

// region ClienteFields
class ClienteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIdR;
  static TableField get idR {
    return _fIdR = _fIdR ?? SqlSyntax.setField(_fIdR, 'idR', DbType.integer);
  }

  static TableField? _fNombre;
  static TableField get Nombre {
    return _fNombre =
        _fNombre ?? SqlSyntax.setField(_fNombre, 'Nombre', DbType.text);
  }

  static TableField? _fRTN;
  static TableField get RTN {
    return _fRTN = _fRTN ?? SqlSyntax.setField(_fRTN, 'RTN', DbType.text);
  }

  static TableField? _fEstado;
  static TableField get Estado {
    return _fEstado =
        _fEstado ?? SqlSyntax.setField(_fEstado, 'Estado', DbType.text);
  }

  static TableField? _fCreadoPor;
  static TableField get CreadoPor {
    return _fCreadoPor = _fCreadoPor ??
        SqlSyntax.setField(_fCreadoPor, 'CreadoPor', DbType.integer);
  }

  static TableField? _fModificadoPor;
  static TableField get ModificadoPor {
    return _fModificadoPor = _fModificadoPor ??
        SqlSyntax.setField(_fModificadoPor, 'ModificadoPor', DbType.integer);
  }

  static TableField? _fFechaCreacion;
  static TableField get FechaCreacion {
    return _fFechaCreacion = _fFechaCreacion ??
        SqlSyntax.setField(_fFechaCreacion, 'FechaCreacion', DbType.datetime);
  }

  static TableField? _fFechaModificacion;
  static TableField get FechaModificacion {
    return _fFechaModificacion = _fFechaModificacion ??
        SqlSyntax.setField(
            _fFechaModificacion, 'FechaModificacion', DbType.datetime);
  }
}
// endregion ClienteFields

//region ClienteManager
class ClienteManager extends SqfEntityProvider {
  ClienteManager()
      : super(BDCybernet(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Cliente';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ClienteManager
// region Usuario
class Usuario extends TableBase {
  Usuario({this.id, this.User, this.Password}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Usuario.withFields(this.User, this.Password) {
    _setDefaultValues();
  }
  Usuario.withId(this.id, this.User, this.Password) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Usuario.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['User'] != null) {
      User = o['User'].toString();
    }
    if (o['Password'] != null) {
      Password = o['Password'].toString();
    }
  }
  // FIELDS (Usuario)
  int? id;
  String? User;
  String? Password;

  // end FIELDS (Usuario)

  static const bool _softDeleteActivated = false;
  UsuarioManager? __mnUsuario;

  UsuarioManager get _mnUsuario {
    return __mnUsuario = __mnUsuario ?? UsuarioManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (User != null || !forView) {
      map['User'] = User;
    }
    if (Password != null || !forView) {
      map['Password'] = Password;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (User != null || !forView) {
      map['User'] = User;
    }
    if (Password != null || !forView) {
      map['Password'] = Password;
    }

    return map;
  }

  /// This method returns Json String [Usuario]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Usuario]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [User, Password];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, User, Password];
  }

  static Future<List<Usuario>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Usuario.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Usuario>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Usuario>[];
    try {
      objList = list
          .map((usuario) => Usuario.fromMap(usuario as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Usuario.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Usuario>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Usuario> objList = <Usuario>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Usuario.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Usuario by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Usuario] if exist, otherwise returns null
  Future<Usuario?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Usuario? obj;
    final data = await _mnUsuario.getById([id]);
    if (data.length != 0) {
      obj = Usuario.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Usuario) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUsuario.insert(this, ignoreBatch);
    } else {
      await _mnUsuario.update(this);
    }

    return id;
  }

  /// Saves the (Usuario) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUsuario.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUsuario.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Usuario. Returns a new Primary Key value of Usuario

  /// <returns>Returns a new Primary Key value of Usuario
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Usuario> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Usuario> usuarios,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await BDCybernet().batchStart();
    for (final obj in usuarios) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await BDCybernet().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < usuarios.length; i++) {
        if (usuarios[i].id == null) {
          usuarios[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUsuario.rawInsert(
          'INSERT OR REPLACE INTO Usuario (id, User, Password)  VALUES (?,?,?)',
          [id, User, Password],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Usuario id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Usuario id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Usuario Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Usuario>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Usuario> usuarios,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnUsuario.rawInsertAll(
        'INSERT OR REPLACE INTO Usuario (id, User, Password)  VALUES (?,?,?)',
        usuarios,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Usuario

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Usuario invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUsuario
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUsuario.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Usuario] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  UsuarioFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UsuarioFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UsuarioFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UsuarioFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion usuario

// region UsuarioField
class UsuarioField extends FilterBase {
  UsuarioField(UsuarioFilterBuilder usuarioFB) : super(usuarioFB);

  @override
  UsuarioFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder isNull() {
    return super.isNull() as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UsuarioFilterBuilder;
  }

  @override
  UsuarioField get not {
    return super.not as UsuarioField;
  }
}
// endregion UsuarioField

// region UsuarioFilterBuilder
class UsuarioFilterBuilder extends ConjunctionBase {
  UsuarioFilterBuilder(Usuario obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnUsuario = obj._mnUsuario;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UsuarioManager? _mnUsuario;

  /// put the sql keyword 'AND'
  @override
  UsuarioFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UsuarioFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UsuarioFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UsuarioFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UsuarioFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UsuarioFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UsuarioFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UsuarioFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UsuarioFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UsuarioFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UsuarioFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UsuarioField _setField(UsuarioField? field, String colName, DbType dbtype) {
    return UsuarioField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UsuarioField? _id;
  UsuarioField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  UsuarioField? _User;
  UsuarioField get User {
    return _User = _setField(_User, 'User', DbType.text);
  }

  UsuarioField? _Password;
  UsuarioField get Password {
    return _Password = _setField(_Password, 'Password', DbType.text);
  }

  /// Deletes List<Usuario> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUsuario!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUsuario!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Usuario ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUsuario!.updateBatch(qparams, values);
  }

  /// This method always returns [Usuario] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Usuario?
  @override
  Future<Usuario?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUsuario!.toList(qparams);
    final data = await objFuture;
    Usuario? obj;
    if (data.isNotEmpty) {
      obj = Usuario.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Usuario]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Usuario?
  @override
  Future<Usuario> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Usuario();
  }

  /// This method returns int. [Usuario]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? usuarioCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usuariosFuture = await _mnUsuario!.toList(qparams);
    final int count = usuariosFuture[0]['CNT'] as int;
    if (usuarioCount != null) {
      usuarioCount(count);
    }
    return count;
  }

  /// This method returns List<Usuario> [Usuario]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Usuario>
  @override
  Future<List<Usuario>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Usuario> usuariosData = await Usuario.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usuariosData;
  }

  /// This method returns Json String [Usuario]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Usuario]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Usuario]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUsuario!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Usuario]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Usuario WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnUsuario!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Usuario]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUsuario!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Usuario.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUsuario!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UsuarioFilterBuilder

// region UsuarioFields
class UsuarioFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUser;
  static TableField get User {
    return _fUser = _fUser ?? SqlSyntax.setField(_fUser, 'User', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get Password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'Password', DbType.text);
  }
}
// endregion UsuarioFields

//region UsuarioManager
class UsuarioManager extends SqfEntityProvider {
  UsuarioManager()
      : super(BDCybernet(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Usuario';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion UsuarioManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await BDCybernetSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await BDCybernetSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await BDCybernetSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class BDCybernetSequenceManager extends SqfEntityProvider {
  BDCybernetSequenceManager() : super(BDCybernet());
}
// END OF ENTITIES
